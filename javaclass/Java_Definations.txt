   *** JAVA-Definitions ***
1. * Java Variables
    A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.
    A variable is the name of a reserved area allocated in memory. In other words, it is a name of the memory location.
    It is a combination of "vary + able" which means its value can be changed.
        Different types of variables :
         i. local    ii. instance     iii. static
    i). Local Variable
    A variable declared inside the body of the method is called local variable. You can use this variable only within that method
    and the other methods in the class aren't even aware that the variable exists.
    A local variable cannot be defined with "static" keyword.

    ii). Instance Variable
    A variable declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static.
    It is called an instance variable because its value is instance-specific and is not shared among instances.

    iii). Static variable
    A variable that is declared as static is called a static variable. It cannot be local.
    You can create a single copy of the static variable and share it among all the instances of the class.
    Memory allocation for static variables happens only once when the class is loaded in the memory.

2. * Final Variables
    final keyword (this will declare the variable as "final" or "constant", which means unchangeable and read-only)

3. * Identifiers
     All Java variables must be identified with unique names.These unique names are called identifiers.

4. * Data Types
     Represents the size and different values that can be stored in a variable

5.* Primitive data types - includes byte, short, int, long, float, double, boolean and char

6.* Non-Primitive Data Types
    Non-primitive data types are called reference types because they refer to objects.
    Non-primitive data types - Strings, Arrays, Classes, Interface

7.* Operators
    Operators are used to perform operations on variables and values.

8.* Strings
    Strings are used for storing text.
    A String variable contains a collection of characters surrounded by double quotes

9.* String Concatenation
    strings to combine them using + operator or concat()

10.* Boolean Expression
     A Boolean expression returns a boolean value: true or false

11.* if Statement
     Use the if statement to specify a block of Java code to be executed if a condition is true.

12.* else Statement
    Use else to specify a block of code to be executed, if the same condition is false

13.* else if Statement
    Use else if to specify a new condition to test, if the first condition is false

14.* Switch Statement
    Use switch to specify many alternative blocks of code to be executed
    Instead of writing many if..else statements, you can use the switch statement

15.* Break
    It breaks out of the switch block
    This will stop the execution of more code and case testing inside the block.

16.* Default
    The default keyword specifies some code to run if there is no case match

17.* Loops
     Loops can execute a block of code as long as a specified condition is reached.
     Loops are handy because they save time, reduce errors, and they make code more readable.

18.* While Loop
     The while loop loops through a block of code as long as a specified condition is true

19.* Do/While Loop
     The do/while loop is a variant of the while loop. This loop will execute the code block once,
     before checking if the condition is true,then it will repeat the loop as long as the condition is true.

20.* For Loop
     A "For" Loop is used to repeat a specific block of code a known number of times.
     When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop

21.* Nested Loops
     It is also possible to place a loop inside another loop. This is called a nested loop.
     The "inner loop" will be executed one time for each iteration of the "outer loop"

22.* For-Each Loop
     A "for-each" loop, which is used exclusively to loop through elements in an array

23.* Continue statement
     The continue statement breaks one iteration (in the loop), if a specified condition occurs,
      and continues with the next iteration in the loop.

24.* Arrays
     Java array is an object which contains elements of a similar data type. Additionally,
     The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements.
     We can store only a fixed set of elements in a Java array.
     Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.
     Array is a set of Homogeneous or similar kind of data elements known as Arrays.

25.* Loop Through an Array
     You can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run

26.* Multidimensional Arrays
     A multidimensional array is an array of arrays.
     Multidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns.

27.* Method
    A method is a block of code which only runs when it is called.
    You can pass data, known as parameters, into a method.
    Methods are used to perform certain actions, and they are also known as functions.
    Why use methods? To reuse code: define the code once, and use it many times.

28.* Method Parameters and Arguments
     Information can be passed to methods as parameter. Parameters act as variables inside the method.
     Parameters are specified after the method name, inside the parentheses. You can add as many parameters as you want,
     just separate them with a comma.
     When a parameter is passed to the method, it is called an argument

29.* Method Multiple Parameters
    When a more then one parameters are passed in to the method as an arguments known as a Multiple Parameters method.

30.* Method Overloading
     Multiple methods can have the same name with different parameters

31.* Scope
     In Java, variables are only accessible inside the region they are created. This is called scope.

32.* Method Scope
     Variables declared directly inside a method are available anywhere in the method

33.* Block Scope
     A block of code refers to all of the code between curly braces {}.

34.* Recursion
     Recursion is the technique of making a function call itself.
     Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.

35.* Halting Condition
     Just as loops can run into the problem of infinite looping, recursive functions can run into the problem of infinite recursion.
     Infinite recursion is when the function never stops calling itself. Every recursive function should have a halting condition,
     which is the condition where the function stops calling itself

36.* OOPS pillar
    Abstraction, Encapsulation, Inheritance, Polymorphism

37.* Class
     A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.
     It is a logical entity. It can't be physical.

38.* Object
    An object is a real-world entity.
    An object is a runtime entity.
    The object is an entity which has state and behavior.
    The object is an instance of a class.

39.* toString()
     If you want to represent any object as a string, toString() method comes into existence.
     The toString() method returns the String representation of the object.
     If you print any object, Java compiler internally invokes the toString() method on the object.
     So overriding the toString() method

40.* Modifiers
    Access Modifiers :- controls the access level
    Non-Access Modifiers :- do not control access level, but provides other functionality

41.* Access Modifiers
    Public :-	The code is accessible for all classes
    Private :-	The code is only accessible within the declared class
    Default :-	The code is only accessible in the same package. This is used when you don't specify a modifier
    Protected :- The code is accessible in the same package and subclasses

42.* Non-Access Modifiers
    final :-	Attributes and methods cannot be overridden/modified
    static :-	Attributes and methods belongs to the class, rather than an object
    abstract :-	Can only be used in an abstract class, and can only be used on methods. The method does not have a body
    transient :-	Attributes and methods are skipped when serializing the object containing them
    synchronized :-	Methods can only be accessed by one thread at a time
    volatile :-	The value of an attribute is not cached thread-locally, and is always read from the "main memory"

43.* Final
     If you don't want the ability to override existing attribute values, declare attributes as final

44.* Static
     A static method means that it can be accessed without creating an object of the class, unlike public

45.* Encapsulation
    Encapsulation in Java is a process of wrapping code and data together into a single unit
     The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users.
     To achieve this, you must:-
     declare class variables/attributes as private
     provide public get and set methods to access and update the value of a private variable

46.* Why Encapsulation
    Better control of class attributes and methods
    Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
    Flexible: the programmer can change one part of the code without affecting other parts
    Increased security of data

47.* Set
    The set method sets the value.

48.* Get
    The get method returns the variable value

49.* Packages
     A package in Java is used to group related classes. Think of it as a folder in a file directory.
     We use packages to avoid name conflicts, and to write a better maintainable code.

50.* Inheritance (IS-A)
    Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
    In Java, it is possible to inherit attributes and methods from one class to another.
    To inherit from a class, use the extends keyword.
    It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.
    Inheritance represents IS-A relationship.
    Types of inheritance in java
    i). Single Inheritance  ii). Multilevel  iii). Hierarchical  iv). Multiple  v). Hybrid
    i). Single level Inheritance :
        When a class inherits another class, it is known as a single inheritance
    ii). Multilevel :
        When there is a chain of inheritance, it is known as multilevel inheritance.
    iii). Hierarchical :
        When two or more classes inherits a single class, it is known as hierarchical inheritance.
    iv). Multiple :
        Java does not support "multiple inheritance" (a class can only inherit from one superclass).
        However, it can be achieved with interfaces, because the class can implement multiple interfaces
    v). Hybrid :
        Hybrid Inheritance in Java is a combination of inheritance. In this type of Inheritance, more than one kind of inheritance is observed

51.* Polymorphism
     Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
     * Method Overloading is also known as Compile time polymorphism
     * Method Overriding is also known as Run time polymorphism

52.* Method Overloading
    If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

53.* Method overriding
    If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
    The method must have the same name as in the parent class
    The method must have the same parameter as in the parent class.
    There must be an IS-A relationship (inheritance).

54.* Abstraction
    Data abstraction is the process of hiding certain details and showing only essential information to the user.
    Abstraction can be achieved with either abstract classes or interfaces
    The abstract keyword is a non-access modifier, used for classes and methods

55.* Abstract class
    Abstract class is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

56.* Abstract method
    Abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)

57.* Interfaces
     Another way to achieve abstraction in Java, is with interfaces.
     An interface is a completely "abstract class" that is used to group related methods with empty bodies
     * abstract classes, interfaces cannot be used to create objects
     * Interface methods do not have a body - the body is provided by the "implement" class
     * On implementation of an interface, you must override all of its methods
     * Interface methods are by default abstract and public
     * Interface attributes are by default public, static and final
     * An interface cannot contain a constructor

58.* Aggregation in Java (HAS-A)
    If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.

59.* Enums
     An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).
     To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma.
     Note that they should be in uppercase letters

60.* List
     List in Java provides the facility to maintain the ordered collection.
     It contains the index-based methods to insert, update, delete and search the elements.
     It can have the duplicate elements also. We can also store the null elements in the collectionsframework.list.
     The List interface is found in the java.util package and inherits the Collection interface

61.* ArrayList
     Java ArrayList class uses a dynamic array for storing the elements. It is like an array, but there is no size limit.
     We can add or remove elements anytime. So, it is much more flexible than the traditional array. It is found in the java.util package.
    Java ArrayList class can contain duplicate elements.
    Java ArrayList class maintains insertion order.
    Java ArrayList class is non synchronized.
    Java ArrayList allows random access because the array works on an index basis.

62.* LinkedList
    Java LinkedList class uses a doubly linked collectionsframework.list to store the elements. It provides a linked-collectionsframework.list data structure.
    It inherits the AbstractList class and implements List and Deque interfaces.
    Java LinkedList class can contain duplicate elements.
    Java LinkedList class maintains insertion order.
    Java LinkedList class is non synchronized.
    In Java LinkedList class, manipulation is fast because no shifting needs to occur.
    Java LinkedList class can be used as a collectionsframework.list, stack or queue.

63.* HashMap
    Java HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique.
    If you try to insert the duplicate key, it will replace the element of the corresponding key.
    It is easy to perform operations using the key index like updation, deletion, etc. HashMap class is found in the java.util package.

64.* HashSet
    Java HashSet class is used to create a collection that uses a hash table for storage.
    It inherits the AbstractSet class and implements Set interface.
    HashSet stores the elements by using a mechanism called hashing.
    HashSet contains unique elements only.
    HashSet allows null value.
    HashSet class is non synchronized.
    HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
    HashSet is the best approach for search operations.
    The initial default capacity of HashSet is 16, and the load factor is 0.75

65.* Iterator
     An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.
     It is called an "iterator" because "iterating" is the technical term for looping.

66.* Wrapper Classes
    Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.
    The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.

67.* Exception Handling
    The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors
    such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.
    there are three types of exceptions namely:
    1. Checked Exception    2. Unchecked Exception  3. Error

68.* 1. Checked Exception
    The classes that directly inherit the Throwable class except RuntimeException and Error are known as checked exceptions.
    For example, IOException, SQLException, etc. Checked exceptions are checked at compile-time.

69.* 2. Unchecked Exception
     The classes that inherit the RuntimeException are known as unchecked exceptions. For example, ArithmeticException,
     NullPointerException, ArrayIndexOutOfBoundsException, etc. Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

69.* 3. Error
     Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc.

70.* Try
    The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone.
    The try block must be followed by either catch or finally.

71.* Catch
    The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone.
    It can be followed by finally block later.

72.* Finally
    The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not.

73.* Throw
    The "throw" keyword is used to throw an exception.

74.* Throws
    The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method.
    It doesn't throw an exception. It is always used with method signature.

75.* Regular Expressions
    Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.
    A regular expression is a sequence of characters that forms a search pattern.
    Java Regex API provides 1 interface and 3 classes in java.util.regex package.
    1. MatchResult interface     2. Matcher class   3. Pattern class    4. PatternSyntaxException class

76.* Threads
    Threads allows a program to operate more efficiently by doing multiple things at the same time.
    Threads can be used to perform complicated tasks in the background without interrupting the main program.
    A Thread is a very light-weighted process, or we can say the smallest part of the process that allows a program
    to operate more efficiently by running multiple tasks simultaneously.

78.* Multithreading
    When multiple threads are executed in parallel at the same time, this process is known as Multithreading.

79. * Lambda Expressions
    Lambda expression is a new and important feature of Java which was included in Java SE 8.
    It provides a clear and concise way to represent one method interface using an expression.

80.* Functional Interface
    An interface which has only one abstract method is called functional interface.

81.* Compilation Flow
     When we compile Java program using javac tool, the Java compiler converts the source code into byte code.

82.* Class
    Class keyword is used to declare a class in Java.

83.* Public
    public keyword is an access modifier that represents visibility. It means it is visible to all.

84.* Static
    Static is a keyword. If we declare any method as static, it is known as the static method.
    The core advantage of the static method is that there is no need to create an object to invoke the static method.
     The main() method is executed by the JVM, so it doesn't require creating an object to invoke the main() method. So, it saves memory.

85.* Void
    Void is the return type of the method. It means it doesn't return any value.

86.* Main
    Main represents the starting point of the program.

87.* String[] args or String args[]
    String[] args or String args[] is used for command line argument.

88.* System.out.println()
    System.out.println() is used to print statement. Here, System is a class, out is an object of the PrintStream class,
    println() is a method of the PrintStream class.

89.* Classloader
    It is the subsystem of JVM that is used to load class files.

90.* Bytecode Verifier
    Checks the code fragments for illegal code that can violate access rights to objects.

91.* Interpreter
    Read bytecode stream then execute the instructions.

92.* JVM
     JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist.
     It is a specification that provides a runtime environment in which Java bytecode can be executed.
     It can also run those programs which are written in other languages and compiled to Java bytecode.

93.* JRE
     JRE is an acronym for Java Runtime Environment. It is also written as Java RTE.
     The Java Runtime Environment is a set of software tools which are used for developing Java applications.
     It is used to provide the runtime environment. It is the implementation of JVM. It physically exists.
     It contains a set of libraries + other files that JVM uses at runtime.

94.* JDK
     JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment
     which is used to develop Java applications and applets.
     It physically exists. It contains JRE + development tools.

95.* Constructor
     A constructor in Java is a special method that is used to initialize objects.
     The constructor is called when an object of a class is created
     Constructor name same as class name, and it cannot have a return type like void
    In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created.
    At the time of calling constructor, memory for the object is allocated in the memory.
    It is a special type of method which is used to initialize the object.
    Constructor name must be the same as its class name
    A Constructor must have no explicit return type
    A Java constructor cannot be abstract, static, final, and synchronized
    If there is no constructor in a class, compiler automatically creates a default constructor.

96.* Parameterized Constructor
     A constructor which has a specific number of parameters is called a parameterized constructor.
     The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.

97.* Constructor Overloading in Java
     In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods.
     Constructor overloading in Java is a technique of having more than one constructor with different parameter lists.
     They are arranged in a way that each constructor performs a different task.
     They are differentiated by the compiler by the number of parameters in the collectionsframework.list and their type

98.* this keyword
    this is a reference variable that refers to the current object.
    this can be used to refer current class instance variable.
    this can be used to invoke current class method (implicitly)
    this() can be used to invoke current class constructor.
    this can be passed as an argument in the method call.
    this can be passed as argument in the constructor call.
    this can be used to return the current class instance from the method.

99.* Object Class
    The Object class is the parent class of all the classes in java by default

100.* Object cloning
    The object cloning is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.

101.* Command Line Arguments
    The java command-line argument is an argument i.e. passed at the time of running the java program.

102.* Immutable String
    Immutable simply means unmodifiable or unchangeable.

103.* StringBuffer (mutable)
    Java StringBuffer class is used to create mutable (modifiable) String objects.
    The StringBuffer class in Java is the same as String class except it is mutable
    A String that can be modified or changed is known as mutable String.
    StringBuffer and StringBuilder classes are used for creating mutable strings.
    StringBuilder class is used to create mutable (modifiable) String.

104.* Some of the important Java 8 features are;
      forEach() method in Iterable interface.
      default and static methods in Interfaces.
      Functional Interfaces and Lambda Expressions.
      Java Stream API for Bulk Data Operations on Collections.
      Java Time API.
      Collection API improvements.
      Concurrency API improvements.
      Java IO improvements